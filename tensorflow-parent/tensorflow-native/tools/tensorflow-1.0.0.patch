diff --git a/tensorflow/core/distributed_runtime/rpc/BUILD b/tensorflow/core/distributed_runtime/rpc/BUILD
index 8ab8712..4ef9f48 100644
--- a/tensorflow/core/distributed_runtime/rpc/BUILD
+++ b/tensorflow/core/distributed_runtime/rpc/BUILD
@@ -280,7 +280,16 @@ cc_library(
     alwayslink = 1,
 )
 
-cc_binary(
+cc_library(
+    name = "grpc_runtime",
+    visibility = ["//visibility:public"],
+    deps = [
+        ":grpc_server_lib",
+        ":grpc_session",
+    ],
+)
+
+cc_library(
     name = "grpc_tensorflow_server",
     srcs = [
         "grpc_tensorflow_server.cc",
@@ -293,6 +302,7 @@ cc_binary(
         "//tensorflow/core:lib",
         "//tensorflow/core:protos_all_cc",
         "//tensorflow/core/distributed_runtime:server_lib",
+        "//tensorflow/core/kernels:data_flow",
         "@grpc//:grpc++_unsecure",
     ],
 )
@@ -452,3 +462,35 @@ tf_cuda_cc_test(
         "//tensorflow/core/kernels:variable_ops",
     ],
 )
+
+genrule(
+    name = "copy_jni_md_h",
+    srcs = select({
+        "//tensorflow:darwin": ["@bazel_tools//tools/jdk:jni_md_header-darwin"],
+        "//conditions:default": ["@bazel_tools//tools/jdk:jni_md_header-linux"],
+    }),
+    outs = ["jni_md.h"],
+    cmd = "cp -f $< $@",
+)
+
+genrule(
+    name = "copy_jni_h",
+    srcs = ["@bazel_tools//tools/jdk:jni_header"],
+    outs = ["jni.h"],
+    cmd = "cp -f $< $@",
+)
+
+cc_binary(
+    name = "libbridge.so",
+    linkshared = 1,
+    includes = ["."],
+    srcs = [
+        "org_hdl_tensorflow_bridge_TFServer.cc",
+        "exception_jni.cc",
+        "jni_md.h",
+        "jni.h"
+    ],
+    deps = [
+        "grpc_tensorflow_server",
+    ],
+)
diff --git a/tensorflow/core/distributed_runtime/rpc/exception_jni.cc b/tensorflow/core/distributed_runtime/rpc/exception_jni.cc
new file mode 100644
index 0000000..70e2abf
--- /dev/null
+++ b/tensorflow/core/distributed_runtime/rpc/exception_jni.cc
@@ -0,0 +1,37 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+#include <stdarg.h>
+
+#include "exception_jni.h"
+
+const char kTFServerException[] = "org/hdl/tensorflow/bridge/TFServerException";
+const char kIllegalArgumentException[] = "java/lang/IllegalArgumentException";
+const char kIllegalStateException[] = "java/lang/IllegalStateException";
+const char kNullPointerException[] = "java/lang/NullPointerException";
+const char kIndexOutOfBoundsException[] = "java/lang/IndexOutOfBoundsException";
+const char kUnsupportedOperationException[] =
+    "java/lang/UnsupportedOperationException";
+
+void throwException(JNIEnv* env, const char* clazz, const char* fmt, ...) {
+  va_list args;
+  va_start(args, fmt);
+  char* message = nullptr;
+  if (vasprintf(&message, fmt, args) >= 0) {
+    printf("%s", message);
+    env->ThrowNew(env->FindClass(clazz), message);
+  } else {
+    env->ThrowNew(env->FindClass(clazz), "");
+  }
+  va_end(args);
+}
diff --git a/tensorflow/core/distributed_runtime/rpc/exception_jni.h b/tensorflow/core/distributed_runtime/rpc/exception_jni.h
new file mode 100644
index 0000000..3be24cc
--- /dev/null
+++ b/tensorflow/core/distributed_runtime/rpc/exception_jni.h
@@ -0,0 +1,37 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+#ifndef TENSORFLOW_JAVA_EXCEPTION_JNI_H_
+#define TENSORFLOW_JAVA_EXCEPTION_JNI_H_
+
+#include <jni.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+class TF_Status;
+
+extern const char kTFServerException[];
+extern const char kIllegalArgumentException[];
+extern const char kIllegalStateException[];
+extern const char kNullPointerException[];
+extern const char kIndexOutOfBoundsException[];
+extern const char kUnsupportedOperationException[];
+
+void throwException(JNIEnv* env, const char* clazz, const char* fmt, ...);
+
+#ifdef __cplusplus
+}  // extern "C"
+#endif  // __cplusplus
+#endif  // TENSORFLOW_JAVA_EXCEPTION_JNI_H_
diff --git a/tensorflow/core/distributed_runtime/rpc/org_hdl_tensorflow_bridge_TFServer.cc b/tensorflow/core/distributed_runtime/rpc/org_hdl_tensorflow_bridge_TFServer.cc
new file mode 100644
index 0000000..1e64399
--- /dev/null
+++ b/tensorflow/core/distributed_runtime/rpc/org_hdl_tensorflow_bridge_TFServer.cc
@@ -0,0 +1,113 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+#include <jni.h>
+#include <stdio.h>
+#include <iostream>
+#include <string>
+using namespace std;
+
+#include "exception_jni.h"
+#include "org_hdl_tensorflow_bridge_TFServer.h"
+#include "tensorflow/core/distributed_runtime/server_lib.h"
+
+using tensorflow::ServerDef;
+
+/*
+ * Class:     org_hdl_tensorflow_bridge_TFServer
+ * Method:    createServer
+ * Signature: ([B)J
+ */
+JNIEXPORT jlong JNICALL Java_org_hdl_tensorflow_bridge_TFServer_createServer
+  (JNIEnv * env, jobject jobj, jbyteArray array) {
+
+  jbyte* elements = env->GetByteArrayElements(array, NULL);
+  jsize textLength = env->GetArrayLength(array);
+  char* b = new char[textLength + 1];
+  memcpy(b, elements, textLength);
+  b[textLength] = '\0';
+
+  env->ReleaseByteArrayElements(array, elements, JNI_ABORT);
+
+  std::unique_ptr< tensorflow::ServerInterface > *arg2 = (std::unique_ptr< tensorflow::ServerInterface > *) 0 ;
+  std::unique_ptr< tensorflow::ServerInterface > temp2 ;
+  arg2 = &temp2;
+
+  ServerDef *arg1 = 0 ;
+  tensorflow::ServerDef temp1 ;
+  if(!temp1.ParseFromString(string(b, textLength))) {
+    throwException(env, kTFServerException,
+                       "The ServerDef could not be parsed as a valid protocol buffer");
+    return -1;
+  }
+//  cout << temp1.DebugString() << "\n";
+  arg1 = &temp1;
+
+  tensorflow::Status status = tensorflow::NewServer((ServerDef const &)*arg1, arg2);
+  if (!status.ok()) {
+    throwException(env, kTFServerException, status.error_message().c_str());
+    return -1;
+  }
+
+  tensorflow::ServerInterface * server = arg2->release();
+  return (jlong)std::addressof(*server);
+}
+
+/*
+ * Class:     org_hdl_tensorflow_bridge_TFServer
+ * Method:    startServer
+ * Signature: (J)V
+ */
+JNIEXPORT void JNICALL Java_org_hdl_tensorflow_bridge_TFServer_startServer
+  (JNIEnv * env, jobject jobj, jlong serverAddr) {
+  long pointer = (long)serverAddr;
+  tensorflow::ServerInterface* server = (tensorflow::ServerInterface*)pointer;
+  server->Start();
+}
+
+/*
+ * Class:     org_hdl_tensorflow_bridge_TFServer
+ * Method:    join
+ * Signature: (J)V
+ */
+JNIEXPORT void JNICALL Java_org_hdl_tensorflow_bridge_TFServer_join
+  (JNIEnv * env, jobject jobj, jlong serverAddr) {
+  long pointer = (long)serverAddr;
+  tensorflow::ServerInterface* server = (tensorflow::ServerInterface*)pointer;
+  server->Join();
+}
+
+/*
+ * Class:     org_hdl_tensorflow_bridge_TFServer
+ * Method:    stop
+ * Signature: (J)V
+ */
+JNIEXPORT void JNICALL Java_org_hdl_tensorflow_bridge_TFServer_stop
+  (JNIEnv * env, jobject jobj, jlong serverAddr) {
+  long pointer = (long)serverAddr;
+  tensorflow::ServerInterface* server = (tensorflow::ServerInterface*)pointer;
+  server->Stop();
+}
+
+/*
+ * Class:     org_hdl_tensorflow_bridge_TFServer
+ * Method:    target
+ * Signature: (J)Ljava/lang/String;
+ */
+JNIEXPORT jstring JNICALL Java_org_hdl_tensorflow_bridge_TFServer_target
+  (JNIEnv * env, jobject jobj, jlong serverAddr) {
+  long pointer = (long)serverAddr;
+  tensorflow::ServerInterface* server = (tensorflow::ServerInterface*)pointer;
+  string target = server->target();
+  return env->NewStringUTF(target.c_str());
+}
\ No newline at end of file
diff --git a/tensorflow/core/distributed_runtime/rpc/org_hdl_tensorflow_bridge_TFServer.h b/tensorflow/core/distributed_runtime/rpc/org_hdl_tensorflow_bridge_TFServer.h
new file mode 100644
index 0000000..f1adad8
--- /dev/null
+++ b/tensorflow/core/distributed_runtime/rpc/org_hdl_tensorflow_bridge_TFServer.h
@@ -0,0 +1,65 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+#include <jni.h>
+/* Header for class org_hdl_tensorflow_bridge_TFServer */
+
+#ifndef _Included_org_hdl_tensorflow_bridge_TFServer
+#define _Included_org_hdl_tensorflow_bridge_TFServer
+#ifdef __cplusplus
+extern "C" {
+#endif
+/*
+ * Class:     org_hdl_tensorflow_bridge_TFServer
+ * Method:    createServer
+ * Signature: ([B)J
+ */
+JNIEXPORT jlong JNICALL Java_org_hdl_tensorflow_bridge_TFServer_createServer
+  (JNIEnv *, jobject, jbyteArray);
+
+/*
+ * Class:     org_hdl_tensorflow_bridge_TFServer
+ * Method:    startServer
+ * Signature: (J)V
+ */
+JNIEXPORT void JNICALL Java_org_hdl_tensorflow_bridge_TFServer_startServer
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     org_hdl_tensorflow_bridge_TFServer
+ * Method:    join
+ * Signature: (J)V
+ */
+JNIEXPORT void JNICALL Java_org_hdl_tensorflow_bridge_TFServer_join
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     org_hdl_tensorflow_bridge_TFServer
+ * Method:    stop
+ * Signature: (J)V
+ */
+JNIEXPORT void JNICALL Java_org_hdl_tensorflow_bridge_TFServer_stop
+  (JNIEnv *, jobject, jlong);
+
+/*
+ * Class:     org_hdl_tensorflow_bridge_TFServer
+ * Method:    target
+ * Signature: (J)Ljava/lang/String;
+ */
+JNIEXPORT jstring JNICALL Java_org_hdl_tensorflow_bridge_TFServer_target
+  (JNIEnv *, jobject, jlong);
+
+#ifdef __cplusplus
+}
+#endif
+#endif
